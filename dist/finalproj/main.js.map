{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/components/board/board.component.css","webpack:///./src/app/components/board/board.component.html","webpack:///./src/app/components/board/board.component.ts","webpack:///./src/app/components/cacheset/cacheset.component.css","webpack:///./src/app/components/cacheset/cacheset.component.html","webpack:///./src/app/components/cacheset/cacheset.component.ts","webpack:///./src/app/services/board.service.client.ts","webpack:///./src/app/services/cacheset.service.client.ts","webpack:///./src/app/services/process.service.client.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `<router-outlet></router-outlet>`,\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import {Routing} from './app.routing';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { AppComponent } from './app.component';\r\nimport {BoardService} from './services/board.service.client';\r\nimport {BoardComponent} from './components/board/board.component';\r\nimport {CacheSetService} from \"./services/cacheset.service.client\";\r\nimport {CachesetComponent} from \"./components/cacheset/cacheset.component\";\r\nimport {ProcessService} from \"./services/process.service.client\";\r\n\r\n// add client side services to providers\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    BoardComponent,\r\n    CachesetComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpModule,\r\n    Routing\r\n  ],\r\n  providers: [\r\n    BoardService,\r\n    CacheSetService,\r\n    ProcessService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule {}\r\n","// Import components\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {BoardComponent} from './components/board/board.component';\r\nimport {ModuleWithProviders} from '@angular/core';\r\n\r\nconst APP_ROUTES: Routes = [\r\n  {path: '', component : BoardComponent},\r\n  {path: 'board', component : BoardComponent}\r\n\r\n];\r\n\r\n// Export the routes as module providers\r\nexport const Routing: ModuleWithProviders = RouterModule.forRoot(APP_ROUTES);\r\n","module.exports = \"td {\\r\\n  background-color: black;\\r\\n\\r\\n\\r\\n}\\r\\ntr {\\r\\n  background-color: black;\\r\\n\\r\\n\\r\\n}\\r\\n\"","module.exports = \"board.component\\r\\n\\r\\n<div *ngFor=\\\"let gameNumber of gameNumbers\\\">\\r\\n  <!--{{gameNumber['value']}}-->\\r\\n</div>\\r\\n\\r\\n<!--<a (click)=\\\"initializeBoard(31)\\\">Initialize Board</a>-->\\r\\n<!--<a (click)=\\\"renderTable()\\\">Create Board</a>-->\\r\\n<!--<a (click)=\\\"findBoard(31)\\\">Find a board test</a>-->\\r\\n<form (ngSubmit)=\\\"boardInput(bNum.value)\\\" #f=\\\"ngForm\\\">\\r\\n  Input Board Number:\\r\\n  <input\\r\\n    name=\\\"bNum\\\"\\r\\n    id=\\\"bNum\\\"\\r\\n    type=\\\"text\\\"\\r\\n    placeholder=\\\"31\\\"\\r\\n    class=\\\"form-control\\\"\\r\\n    ngModel\\r\\n    required\\r\\n    #bNum=\\\"ngModel\\\"\\r\\n  />\\r\\n  <input\\r\\n           class=\\\"button\\\"\\r\\n           type=\\\"submit\\\"/>\\r\\n</form>\\r\\n<form>\\r\\n  Input Process ID:\\r\\n  <input\\r\\n    name=\\\"pid\\\"\\r\\n    id=\\\"pid\\\"\\r\\n    type=\\\"text\\\"\\r\\n    placeholder=\\\"23\\\"\\r\\n    class=\\\"form-control\\\"\\r\\n    ngModel\\r\\n    required\\r\\n    #pid=\\\"ngModel\\\"\\r\\n  />\\r\\n  <input (click)=\\\"getPid(pid.value)\\\"\\r\\n         class=\\\"button\\\"\\r\\n         type=\\\"submit\\\"\\r\\n  />\\r\\n</form>\\r\\n\\r\\n<div class=\\\"container-fluid\\\">\\r\\n  <div *ngIf=\\\"errorFlag\\\"\\r\\n       class=\\\"alert alert-danger\\\">\\r\\n    {{errorMessage}}\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<h1>Your Cache Line to find and complete: </h1>\\r\\n<div *ngFor=\\\"let process of processCache\\\" style=\\\"border:solid; display: inline\\\">\\r\\n  <div *ngIf=\\\"process.found === 0; then thenBlock; else elseBlock\\\"></div>\\r\\n  <ng-template #thenBlock><span style=\\\"background: lightgreen;\\\"> {{process.value}}</span></ng-template>\\r\\n  <ng-template #elseBlock><span style=\\\"background: red\\\">{{process.value}}</span></ng-template>\\r\\n</div>\\r\\n<button\\r\\n  *ngIf=\\\"processCache != null\\\"\\r\\n  (click)=\\\"resetProcess()\\\"\\r\\n  class=\\\"button\\\"\\r\\n  type=\\\"submit\\\"\\r\\n> Reset Process </button>\\r\\n\\r\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\n\r\nimport {Router} from '@angular/router';\r\nimport {BoardService} from '../../services/board.service.client';\r\nimport {Observable, Subscription} from \"rxjs/Rx\";\r\nimport {NgForm} from \"@angular/forms\";\r\nimport {isUndefined} from \"util\";\r\nimport {ProcessService} from \"../../services/process.service.client\";\r\nimport {CacheSetService} from '../../services/cacheset.service.client';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\nexport class BoardComponent implements OnInit {\r\n  @ViewChild('f') boardInputForm: NgForm;\r\n  private subscription: Subscription = new Subscription();\r\n  boardId: any;\r\n  gameNumbers: number[];\r\n  exampleBoard: any;\r\n  data: any;\r\n  interval: any;\r\n  time: number;\r\n  tbl: any;\r\n  body: any;\r\n  startedRefresh: boolean;\r\n  bNum: number;\r\n  pid: string;\r\n  processCache: [{}];\r\n  errorFlag: boolean;\r\n  errorMessage: string;\r\n\r\n  constructor(private router: Router, private boardService: BoardService, private processService: ProcessService, private cacheService: CacheSetService) {}\r\n\r\n  /* Refresh the gameBoard every 1 second*/\r\n  ngOnInit() {\r\n    this.startedRefresh = false;\r\n    this.body = document.getElementsByTagName('body')[0];\r\n    this.time = 0;\r\n  }\r\n\r\n  /* Get user input for board number and use that to initialize and render the table */\r\n  boardInput(num: number) {\r\n    this.bNum = num;\r\n    this.boardId = num;\r\n    console.log(\"NUM: \", num);\r\n    console.log(\"bNUm: \", this.bNum);\r\n    this.initializeBoard(this.bNum);\r\n    // this.renderTable();\r\n  }\r\n\r\n  getPid(num: string) {\r\n    this.pid = num;\r\n    console.log(\"PID \", this.pid);\r\n    this.processService.findProcessById(this.pid)\r\n      .subscribe((process: any) => {\r\n        this.processCache = process.processCache;\r\n        // console.log(\"INSIDE THE SUBSCRIBE \", process);\r\n        // console.log(\"PROCESS CACHE: \", this.processCache);\r\n      });\r\n  }\r\n\r\n  /* Being the refresh for the page */\r\n  startRefresh() {\r\n    this.startedRefresh = true;\r\n    if(this.boardId != null) {\r\n      console.log(\"INSIDE: \", this.boardId);\r\n      this.interval = setInterval(() => {\r\n        this.refresh();\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /* Refresh the page, calling the findBoard function so that all players have updated gameBoards */\r\n  refresh() {\r\n    //console.log(\"REFRESHING: \", this.time);\r\n    this.time = this.time + 5;\r\n    this.boardService.findBoard(this.boardId)\r\n      .subscribe((board : any) => {\r\n        // console.log(\"ARE WE GETTING A BOARD?!\");\r\n        this.gameNumbers = board.numbers;\r\n        this.tbl.remove();\r\n        // this.body.removeChild(this.tbl);\r\n        this.renderTable();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Initializes a Game Board. Currently this is needed to be done before we can hit render for the first time.\r\n   * @param boardId\r\n   */\r\n  initializeBoard(boardId) {\r\n    this.boardId = boardId;\r\n    console.log('initializing');\r\n    // Make a board.\r\n    const nums = [];\r\n    let i = 0;\r\n    let cacheLine = 0;\r\n    let cacheCounter = 0;\r\n    for (i = 0; i < 100; i++) {\r\n      if (cacheCounter > 3) {\r\n        cacheLine += 1;\r\n        cacheCounter = 0;\r\n      }\r\n      nums.push({position: 99-i, value: i, cacheLine: cacheLine, hidden: true, locked: false});\r\n      cacheCounter += 1;\r\n    }\r\n    this.exampleBoard = {id: boardId,\r\n      numbers: nums\r\n    };\r\n\r\n\r\n    // Initialize the board in the database/server.\r\n    this.boardService.initializeBoard(boardId, this.exampleBoard).subscribe((game: any) => {\r\n      //console.log(game);\r\n      this.gameNumbers = game.numbers; // This should get removed once we put in boardId (probably)\r\n      console.log(this.gameNumbers);\r\n      this.renderTable();\r\n    });\r\n\r\n    //Initialize the cache in the database/server.\r\n    console.log(\"running initialize cache call from component\");\r\n    this.cacheService.initializeCache(boardId).subscribe((cache: any) => {\r\n      console.log(\"cache should be initalized. in the board component\");\r\n      console.log(cache);\r\n    });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Find the number who's position equals the given parameter.\r\n   * @param position\r\n   * @returns the Value and Hidden Flag, may later expand to have it also include the cacheLine\r\n   */\r\n  findThisNumber(position) {\r\n    //console.log(\"entering find This number\");\r\n    for (var i = 0; i < this.gameNumbers.length; i++) {\r\n      if (this.gameNumbers[i]['position'] === position) {\r\n        return {value: this.gameNumbers[i]['value'], hidden: this.gameNumbers[i]['hidden']};\r\n      }\r\n    }\r\n  }\r\n\r\n  findBoard(boardId) {\r\n    this.boardId = boardId;\r\n    console.log(\"looking for a board\");\r\n    this.boardService.findBoard(boardId).subscribe((board: any) => {\r\n      this.gameNumbers = board.numbers;\r\n    });\r\n  }\r\n  /**\r\n   * Creates (HTML-wise) and Renders the table to the screen.\r\n   *\r\n   * Note: In the future, I'm thinking we should give this a boardId as a parameter, so it can\r\n   * fetch the board from the db to render.\r\n   */\r\n\r\n  renderTable() {\r\n    this.tbl = document.createElement('table');\r\n    this.tbl.style.width = '50%';\r\n    this.tbl.setAttribute('border', '1');\r\n    var tbdy = document.createElement('tbody');\r\n    for (var i = 0; i < 10; i++) {\r\n      var tr = document.createElement('tr');\r\n      for (var j = 0; j < 10; j++) {\r\n        // console.log('J is now: ' + j);\r\n        if (i === 10 && j === 10) {\r\n          break;\r\n        } else {\r\n          var td = document.createElement('td');\r\n          var pos = null;\r\n          if (i === 0) {\r\n            pos = j;\r\n          } else {\r\n            pos = i * 10 + j;\r\n          }\r\n          // console.log('the pos ' + pos);\r\n          // Currently a dict with {value: x, hidden: bool}\r\n          var data = this.findThisNumber(pos);\r\n          td.appendChild(document.createTextNode(data['value']));\r\n          // Change the background color based on hidden bool\r\n          if (data['hidden']) {\r\n            td.style.backgroundColor = '#000000';\r\n          } else {\r\n            td.style.backgroundColor = 'white';\r\n          }\r\n          td.style.textAlign = 'center';\r\n          td.style.webkitTextFillColor = '#000000';\r\n          td.addEventListener(\"click\", this.tileClick);\r\n          td.addEventListener(\"click\", (e) => {\r\n            //console.log(\"WHAT IS e\", e.target.toString());\r\n            this.accessMemory(e);\r\n            // var process = {};\r\n            // for (let i = 0; i < this.processCache.length; ++i) {\r\n            //   console.log(\"INSIDE FOR LOOP\");\r\n            //   if(this.processCache[i]['value'] === e.target.valueOf()) {\r\n            //     process = {value: this.processCache[i]['value'], found: 1};\r\n            //     this.processCache.splice(i, 1, process);\r\n            //     //this.processCache[i] = process;\r\n            //   }\r\n            // }\r\n            // console.log(this.processCache);\r\n          });\r\n          tr.appendChild(td);\r\n        }\r\n      }\r\n      tbdy.appendChild(tr);\r\n    }\r\n    this.tbl.appendChild(tbdy);\r\n    this.body.appendChild(this.tbl);\r\n    if (this.startedRefresh == false) {\r\n      this.startRefresh();\r\n    }\r\n  }\r\n\r\n   /**\r\n   * Represents what happens when we click a tile. Currently used to highlight the tile by changing the background color.\r\n   * @param e represents the mouse event.\r\n   */\r\n  tileClick(e) {\r\n    // e.target.style.backgroundColor = 'white'; This shouldn't be necessary once we implement rendering every 'x' seconds.\r\n    console.log(\"You clicked on \" + e.target.textContent);\r\n    var currentNum = e.target.textContent;\r\n     //var currentCacheLine = this.findThisNumbersCacheLine(currentNum);\r\n     var currentCacheLine = null;\r\n  }\r\n\r\n\r\n  accessMemory(e) {\r\n    var value = {value: e.target.textContent};\r\n    console.log(\"umm..\" + value.value);\r\n    var process = {};\r\n    this.errorFlag = false;\r\n    for (let i = 0; i < 10; i++) {\r\n      //console.log(\"INSIDE FOR LOOP\", this.processCache[i]['value'] == e.target.textContent);\r\n      if(this.processCache[i]['value'] == e.target.textContent) {\r\n        if (i != 0) {\r\n          if (this.processCache[i - 1]['found'] != 1) {\r\n            this.errorFlag = true;\r\n            this.errorMessage = \"You must finish your cache line in order!\";\r\n          }\r\n        }\r\n        if (!this.errorFlag) {\r\n          process = {value: this.processCache[i]['value'], found: 1};\r\n          //console.log(process);\r\n          this.processService.updateProcess(this.pid, process)\r\n            .subscribe((status: any) => {\r\n              //console.log(status);\r\n              this.processService.findProcessById(this.pid)\r\n                .subscribe((process1: any) => {\r\n                  //console.log(\"RETURNED PROCESS \", process1);\r\n                  this.processCache = process1.processCache;\r\n                  //console.log(this.processCache);\r\n                });\r\n            });\r\n          //this.processCache.splice(i, 1, process);\r\n          //this.processCache[i] = process;\r\n        }\r\n      }\r\n    }\r\n    //console.log(this.processCache);\r\n    this.boardService.accessMemory(this.boardId, value).subscribe((board: any) => {\r\n      this.gameNumbers = board.numbers; // This should get removed once we put in boardId (probably)\r\n      //console.log(this.gameNumbers)\r\n    })\r\n\r\n  }\r\n\r\n  resetProcess() {\r\n    var processToUpdate = {};\r\n    var count1 = 0;\r\n    var count2 = 0;\r\n    console.log('PROCESS LIST LEN', this.processCache.length);\r\n    for (let i = 0; i < this.processCache.length; i++) {\r\n      if (this.processCache[i]['found'] == 1) {\r\n        count1++;\r\n        processToUpdate = {value: this.processCache[i]['value'], found: 0};\r\n        console.log(processToUpdate);\r\n        this.processService.updateProcess(this.pid, processToUpdate)\r\n          .subscribe((status: any) => {\r\n            count2++;\r\n            console.log(\"HOW MANY TIMES\", i);\r\n            console.log(\"STATUS\", status);\r\n            // if(status) {\r\n            //   count++;\r\n            //   console.log(\"IN STATUS\", count);\r\n            // }\r\n            console.log(count1);\r\n            console.log(count2);\r\n            if(count1 == count2) {\r\n              console.log(count1);\r\n              console.log(count2);\r\n              console.log(\"FINAL I\", i);\r\n              this.processService.findProcessById(this.pid)\r\n                .subscribe((process: any) => {\r\n                  this.processCache = process.processCache;\r\n                });\r\n            }\r\n          });\r\n      }\r\n    }\r\n    //waits(5000);\r\n\r\n    // if(count >= 10) {\r\n    //   this.processService.findProcessById(this.pid)\r\n    //     .subscribe((process: any) => {\r\n    //       this.processCache = process.processCache;\r\n    //       //componentRefresh();\r\n    //       //this.startRefresh();\r\n    //       console.log(this.processCache);\r\n    //     });\r\n    // }\r\n    //console.log(this.processCache);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<p>\\r\\n  cacheset works!\\r\\n</p>\\r\\n\\r\\n<h1> Cache </h1>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport {Router} from \"@angular/router\";\r\nimport {CacheSetService} from \"../../services/cacheset.service.client\";\r\n\r\n@Component({\r\n  selector: 'app-cacheset',\r\n  templateUrl: './cacheset.component.html',\r\n  styleUrls: ['./cacheset.component.css']\r\n})\r\nexport class CachesetComponent implements OnInit {\r\n\r\n\r\n  constructor(private router: Router, private cacheSetService: CacheSetService) {}\r\n\r\n  ngOnInit() {\r\n\r\n\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport {environment} from '../../environments/environment';\r\nimport {Http, Response} from '@angular/http';\r\n@Injectable()\r\n\r\nexport class BoardService {\r\n\r\n  baseUrl = environment.baseUrl;\r\n\r\n  constructor(private http: Http) {\r\n  }\r\n  findBoard(boardId) {\r\n    const url = this.baseUrl + '/api/game/' + boardId;\r\n    return this.http.get(url).map((response: Response) => {\r\n      return response.json();\r\n    });\r\n  }\r\n\r\n  initializeBoard(boardId, exampleBoard) {\r\n    const url = this.baseUrl + '/api/game/' + boardId;\r\n    return this.http.post(url, exampleBoard).map((response: Response) => {\r\n      return response.json();\r\n    });\r\n  }\r\n\r\n  accessMemory(boardId, val) {\r\n    console.log(\"in client service. value is : \" + val.value);\r\n    const url = this.baseUrl + '/api/game/' + boardId + '/accessMemory';\r\n    return this.http.post(url, val).map((response: Response) => {\r\n      return response.json();\r\n    });\r\n  }\r\n}\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport {environment} from '../../environments/environment';\r\nimport {Http, Response} from '@angular/http';\r\n@Injectable()\r\n\r\nexport class CacheSetService {\r\n\r\n  baseUrl = environment.baseUrl;\r\n\r\n  constructor(private http: Http) {\r\n  }\r\n\r\n  initializeCache(boardId) {\r\n    console.log(\"at the client cache server\");\r\n    const url = this.baseUrl + '/api/cache/create/' + boardId;\r\n    console.log(url);\r\n    var emptybody = {};\r\n    return this.http.post(url, emptybody).map((response: Response) => {\r\n      console.log(\"getting back from the post\");\r\n      return response.json();\r\n    });\r\n\r\n  }\r\n\r\n  zinitializeBoard(boardId, exampleBoard) {\r\n    const url = this.baseUrl + '/api/game/' + boardId;\r\n    return this.http.post(url, exampleBoard).map((response: Response) => {\r\n      return response.json();\r\n    });\r\n  }\r\n\r\n  findCache(boardId) {\r\n    const url = this.baseUrl + '/api/cache/' + boardId;\r\n    return this.http.get(url).map((response: Response) => {\r\n      return response.json();\r\n    });\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport 'rxjs/Rx';\r\nimport {environment} from '../../environments/environment';\r\nimport {Http, Response} from '@angular/http';\r\n@Injectable()\r\n\r\nexport class ProcessService {\r\n\r\n  baseUrl = environment.baseUrl;\r\n\r\n  constructor(private http: Http) {}\r\n\r\n  findProcessById(pid: string) {\r\n    //console.log(\"IN FIND PROCESS BY ID CLIENT\");\r\n    const url = this.baseUrl + '/api/process/' + pid;\r\n    return this.http.get(url)\r\n      .map((response: Response) => {\r\n        return response.json();\r\n      });\r\n  }\r\n\r\n  createProcess(process: any) {\r\n    const url = this.baseUrl + '/api/process';\r\n    return this.http.post(url, process)\r\n      .map((response: Response) => {\r\n        return response.json();\r\n      });\r\n  }\r\n\r\n  updateProcess(pid: string, process: any) {\r\n   // console.log(\"ARE WE GETTING TO UPDATE?!\");\r\n    const url = this.baseUrl + '/api/process/' + pid;\r\n    return this.http.put(url, process)\r\n      .map((response: Response) => {\r\n        return response.json();\r\n      });\r\n  }\r\n\r\n}\r\n","export const environment = {\r\n  production: false,\r\n  baseUrl : '' // http://localhost:3100\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}